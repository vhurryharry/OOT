-- Triggers
create or replace function apply_update_timestamp()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language 'plpgsql';

create or replace function log_reservation_history()
returns trigger as $$
begin
  insert into course_reservation_history
    (reservation, status, created_at)
    values
    (old.id, old.status, old.created_at);
  return new;
end;
$$ language 'plpgsql';

-- Configuration
create table config (
  key text primary key,
  value text not null
);

-- Groups
create table role (
  id          int generated by default as identity primary key,
  name        text not null,
  parent      int references role(id),
  permissions jsonb,
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on role(created_at);
create index on role(updated_at);
create index on role(deleted_at);
create trigger apply_update_timestamp before update on role for each row execute procedure apply_update_timestamp();

-- Users
create table "user" (
  id                    int generated by default as identity primary key,
  name                  text unique not null,
  email                 text unique not null,
  first_name            text,
  last_name             text,
  role                  int references role(id),
  password              text not null,
  mfa                   text,
  permissions           jsonb,
  metadata              jsonb,
  status                text not null default 'pending_confirmation',
  confirmation_token    text,
  created_at            timestamptz not null default now(),
  updated_at            timestamptz not null default now(),
  deleted_at            timestamptz,
  expires_at            timestamptz,
  password_expires_at   timestamptz
);

create index on "user"(name);
create index on "user"(password);
create index on "user"(created_at);
create index on "user"(updated_at);
create index on "user"(deleted_at);
create trigger apply_update_timestamp before update on "user" for each row execute procedure apply_update_timestamp();

-- User access
create table user_login_history (
  id          int generated by default as identity primary key,
  "user"      int references "user"(id),
  city        text,
  country     text,
  latlng      point,
  user_agent  text,
  ip          inet,
  created_at  timestamptz not null default now()
);

create index on user_login_history(created_at);

-- Auditing
create table audit_log (
  id            int generated by default as identity primary key,
  table_name    text not null,
  table_id      int not null,
  "user"        int references "user"(id),
  action        text not null,
  old           jsonb,
  new           jsonb,
  created_at    timestamptz not null default now()
);

create index on audit_log(table_name);
create index on audit_log(table_id);
create index on audit_log(created_at);

-- Categories
create table category (
  id          int generated by default as identity primary key,
  name        text not null,
  parent      int references category(id),
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on category(created_at);
create index on category(updated_at);
create index on category(deleted_at);
create trigger apply_update_timestamp before update on category for each row execute procedure apply_update_timestamp();

-- Tags
create table tag (
  id          int generated by default as identity primary key,
  name        text unique not null,
  created_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on tag(created_at);
create index on tag(deleted_at);

-- Document category
create table document_category (
  id          int generated by default as identity primary key,
  name        text not null,
  parent      int references document_category(id),
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on document_category(created_at);
create index on document_category(updated_at);
create index on document_category(deleted_at);
create trigger apply_update_timestamp before update on document_category for each row execute procedure apply_update_timestamp();

-- Document
create table document (
  id          uuid unique not null primary key,
  title       text not null,
  content     text,
  type        text not null,
  source      text not null,
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on document using btree (id);
create index on document(type);
create index on document(created_at);
create index on document(updated_at);
create index on document(deleted_at);
create trigger apply_update_timestamp before update on document for each row execute procedure apply_update_timestamp();

create table document_has_tag (
  tag_id int references tag(id) on update cascade on delete cascade,
  document_id uuid references document(id) on update cascade,
  constraint document_has_tag_id primary key (tag_id, document_id)
);

-- Entities
create table entity (
  id                uuid unique not null primary key,
  slug              text unique not null,
  category          int references category(id),
  title             text not null,
  type              text not null default 'page',
  content           text,
  meta_title        text,
  meta_description  text,
  metadata          jsonb,
  created_at        timestamptz not null default now(),
  updated_at        timestamptz not null default now(),
  deleted_at        timestamptz
);

create index on entity using btree (id);
create index on entity(slug);
create index on entity(created_at);
create index on entity(updated_at);
create index on entity(deleted_at);
create trigger apply_update_timestamp before update on entity for each row execute procedure apply_update_timestamp();

create table entity_has_tag (
  tag_id int references tag(id) on update cascade on delete cascade,
  entity_id uuid references entity(id) on update cascade,
  constraint entity_has_tag_id primary key (tag_id, entity_id)
);

-- Menu
create table menu (
  id              int generated by default as identity primary key,
  title           text not null,
  link            text,
  display_order   int default 0,
  parent          int references menu(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on menu(display_order);
create index on menu(created_at);
create index on menu(updated_at);
create index on menu(deleted_at);
create trigger apply_update_timestamp before update on menu for each row execute procedure apply_update_timestamp();

-- Customers
create table customer (
  id                    uuid unique not null primary key,
  login                 text unique,
  first_name            text,
  last_name             text,
  password              text,
  mfa                   text,
  metadata              jsonb,
  type                  text not null default 'student',
  status                text not null default 'pending_confirmation',
  confirmation_token    text,
  accepts_marketing     boolean,
  created_at            timestamptz not null default now(),
  registered_at         timestamptz not null default now(),
  updated_at            timestamptz not null default now(),
  deleted_at            timestamptz,
  expires_at            timestamptz,
  password_expires_at   timestamptz
);

create index on customer using btree (id);
create index on customer(login);
create index on customer(password);
create index on customer(created_at);
create index on customer(updated_at);
create index on customer(deleted_at);
create trigger apply_update_timestamp before update on customer for each row execute procedure apply_update_timestamp();

create table customer_has_tag (
  tag_id int references tag(id) on update cascade on delete cascade,
  customer_id uuid references customer(id) on update cascade,
  constraint customer_has_tag_id primary key (tag_id, customer_id)
);

-- Customer access
create table customer_login_history (
  id          int generated by default as identity primary key,
  customer    uuid references customer(id),
  city        text,
  country     text,
  latlng      point,
  user_agent  text,
  ip          inet,
  created_at  timestamptz not null default now()
);

create index on customer_login_history(created_at);

-- Pageviews
create table pageview (
  id          int generated by default as identity primary key,
  customer    uuid references customer(id),
  city        text,
  country     text,
  latlng      point,
  user_agent  text,
  ip          inet,
  url         text,
  title       text,
  table_name  text,
  table_id    int,
  created_at  timestamptz not null default now()
);

create index on pageview(created_at);

-- Address
create table address (
  id              int generated by default as identity primary key,
  type            text not null default 'billing',
  customer        uuid references customer(id),
  first_name      text not null,
  last_name       text not null,
  line1           text not null,
  line2           text,
  city            text not null,
  state           text not null,
  country         text not null,
  zipcode         text not null,
  company         text,
  phone           text,
  tax_id          text,
  doc_type        text,
  doc_number      text,
  metadata        jsonb,
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on address(type);
create index on address(created_at);
create index on address(updated_at);
create index on address(deleted_at);
create trigger apply_update_timestamp before update on address for each row execute procedure apply_update_timestamp();

-- Phone
create table phone (
  id              int generated by default as identity primary key,
  title           text not null,
  "number"        text not null,
  customer        uuid references customer(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on phone(title);
create index on phone("number");
create index on phone(created_at);
create index on phone(updated_at);
create index on phone(deleted_at);
create trigger apply_update_timestamp before update on phone for each row execute procedure apply_update_timestamp();

-- Email
create table email (
  id              int generated by default as identity primary key,
  email           text not null,
  customer        uuid references customer(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on email(email);
create index on email(created_at);
create index on email(updated_at);
create index on email(deleted_at);
create trigger apply_update_timestamp before update on email for each row execute procedure apply_update_timestamp();

-- Comments
create table comment (
  id          uuid unique not null primary key,
  entity      uuid references entity(id),
  author      uuid references customer(id),
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now(),
  deleted_at  timestamptz
);

create index on comment using btree (id);
create index on comment(created_at);
create index on comment(updated_at);
create index on comment(deleted_at);
create trigger apply_update_timestamp before update on comment for each row execute procedure apply_update_timestamp();

-- Courses
create table course (
  id                uuid unique not null primary key,
  slug              text unique not null,
  title             text not null,
  meta_title        text,
  meta_description  text,
  thumbnail         text,
  hero              text,
  content           text,
  program           text,
  metadata          jsonb,
  display_order     int default 0,
  created_at        timestamptz not null default now(),
  updated_at        timestamptz not null default now(),
  deleted_at        timestamptz
);

create index on course using btree (id);
create index on course(slug);
create index on course(display_order);
create index on course(created_at);
create index on course(updated_at);
create index on course(deleted_at);
create trigger apply_update_timestamp before update on course for each row execute procedure apply_update_timestamp();

-- Course options
create table course_option (
  id              int generated by default as identity primary key,
  title           text not null,
  price           int not null,
  location        point,
  dates           jsonb,
  course          uuid references course(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on course_option(created_at);
create index on course_option(updated_at);
create index on course_option(deleted_at);
create trigger apply_update_timestamp before update on course_option for each row execute procedure apply_update_timestamp();

-- Course reviews
create table course_review (
  id              int generated by default as identity primary key,
  title           text not null,
  content         text,
  rating          int default 0,
  author          uuid references customer(id),
  course          uuid references course(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on course_review(created_at);
create index on course_review(updated_at);
create index on course_review(deleted_at);
create trigger apply_update_timestamp before update on course_review for each row execute procedure apply_update_timestamp();

-- Course testimonials
create table course_testimonial (
  id              int generated by default as identity primary key,
  title           text not null,
  content         text,
  author          uuid references customer(id),
  author_text     text,
  course          uuid references course(id),
  created_at      timestamptz not null default now(),
  updated_at      timestamptz not null default now(),
  deleted_at      timestamptz
);

create index on course_testimonial(created_at);
create index on course_testimonial(updated_at);
create index on course_testimonial(deleted_at);
create trigger apply_update_timestamp before update on course_testimonial for each row execute procedure apply_update_timestamp();

-- Course instructors
create table course_instructor (
  id int generated by default as identity primary key,
  course_id uuid references course(id) on update cascade on delete cascade,
  customer_id uuid references customer(id) on update cascade
);

-- Course payment transaction
create table course_payment (
  id                int generated by default as identity primary key,
  transaction_id    text not null,
  metadata          jsonb,
  customer          uuid references customer(id),
  course            uuid references course(id),
  created_at        timestamptz not null default now()
);

create index on course_payment(transaction_id);
create index on course_payment(created_at);

-- Course reservations
create table course_reservation (
  id                int generated by default as identity primary key,
  "number"          text unique not null,
  course_id         uuid references course(id),
  customer_id       uuid references customer(id),
  status            text not null,
  payment           int references course_payment(id),
  option_title      text not null,
  option_price      int not null,
  option_location   point,
  option_dates      jsonb,
  created_at        timestamptz not null default now(),
  updated_at        timestamptz not null default now()
);

create index on course_reservation("number");
create index on course_reservation(status);
create index on course_reservation(created_at);
create index on course_reservation(updated_at);
create trigger apply_update_timestamp before update on course_reservation for each row execute procedure apply_update_timestamp();
create trigger log_reservation_history before update on course_reservation for each row execute procedure log_reservation_history();

-- Course reservation status history
create table course_reservation_history (
  reservation     int references course_reservation(id),
  status          text not null,
  created_at      timestamptz not null default now()
);

create index on course_reservation_history(reservation);
create index on course_reservation_history(created_at);
